#!/usr/bin/env node

import { program } from 'commander';
import * as fs from 'fs';
import { get as obtain } from 'lodash';

import * as fsh from '../lib/index';

/**
 * Below are the APIs of CLI (Command Line Interface). Some inappropriate titles are used because they are generated by JsDoc.
 *
 * @namespace CLI
 */

// ls

/**
 * @function ls
 * @memberof CLI
 * @param {string} dirPath - A directory-path
 * @param {object} [options]
 * @param {string} [options.type] - "-T" or "--type" and "all", "encoding", "eol"
 * @returns {string}
 * @example
// Ex. on Windows
> npx fs-hospitality ls "D:\Test" --type "encoding"
 */
program
  .command('ls <dirPath>')
  .version('1.0.0')
  .description('Detecting a text specification.')
  .option('-D, --is-only-dir', 'Exacting directories only')
  .option('-F, --is-only-file', 'Exacting files only')
  .option('-S, --excludes-symlink', 'Excluding symblic-links')
  .option('-M, --matched-reg-exp <exp>', 'Ex. "\\d+\\.txt$"')
  .option('-I, --ignored-reg-exp <exp>', 'Ex. "[_\\-.]cache\\d+"')
  .option('-W, --with-file-types', 'Returns file info objects (fs.Dirent)')
  .action(async (dirPath, options) => {
    const dest = await fsh.readdirRecursively(dirPath, options);

    console.dir(dest);
  });

// detect-text-spec

/**
 * @function detect-text-spec
 * @memberof CLI
 * @param {string} filePath - A file-path
 * @param {object} [options]
 * @param {string} [options.type] - "-T" or "--type" and "all", "encoding", "eol"
 * @returns {string}
 * @example
// Ex. on Windows
> npx fs-hospitality detect-text-spec "D:\Test\src.wsf" --type "encoding"
SJIS
> npx fs-hospitality detect-text-spec "D:\Test\src.wsf" --type "eol"
crlf
 */
program
  .command('detect-text-spec <filePath>')
  .version('1.0.0')
  .description('Detecting a text specification.')
  .option('-T, --type <name>', '"all" | "encoding" | "eol"')
  .action((filePath, options) => {
    const detectType = obtain(options, 'type', 'all');
    const data = fs.readFileSync(filePath);

    if (detectType === 'encoding' || detectType === 'all') {
      console.log(fsh.detectTextEncoding(data));
    }

    if (detectType === 'eol' || detectType === 'all') {
      console.log(fsh.detectTextEol(data));
    }
  });

// conv-text-enc

/**
 * @function conv-text
 * @memberof CLI
 * @param {string} filePath - A source file-path
 * @param {string} [destPath] - A destination file-path
 * @param {object} [options]
 * @param {string} [options.trim] - "all" | "start" | "end"
 * @param {string} [options.eol] - "lf" | "cr" | "crlf" or "unix" | "mac" | "dos"
 * @param {string} [options.bom] - Add BOM. Only UTFx encoding
 * @returns {string}
 * @example
// Ex. on Windows
> npx fs-hospitality conv-text "D:\Test\src.wsf" --trim "all" --eol "dos" --bom
 */
program
  .command('conv-text <filePath> [destPath]')
  .version('1.0.0')
  .description('Converting a text encoding.')
  .option('-T, --trim <type>', '"all" | "start" | "end"')
  .option('-E, --eol <type>', '"lf" | "cr" | "crlf" or "unix" | "mac" | "dos"')
  .option('-B, --bom', 'Add BOM. Only UTFx encoding')
  .option(
    '-e, --encoding <name>',
    '"UTF-16BE", "Shift_JIS", ... "Default: "utf8"',
    'utf8',
  )
  .action((filePath, destPath, options) => {
    const trim = obtain(options, 'trim', null);
    const eol = obtain(options, 'eol', null);
    const bom = obtain(options, 'bom', null);
    const encoding = obtain(options, 'encoding', null);
    const textData = fsh.readAsTextSync(filePath);

    let dest = destPath;
    if (!dest) dest = filePath;

    fsh.writeAsTextSync(dest, textData, {
      trim,
      eol,
      bom,
      encoding,
    });
  });

program.parse(process.argv);
